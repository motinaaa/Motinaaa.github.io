{
  "hash": "669a63ae8df749f688a21df0a0ece698",
  "result": {
    "markdown": "---\nauthor: \"Motina\"\ntitle: \"Split-Apply-Combine\"\ncategories: \"Split-apply-combine\"\ndate: \"2023-03-01\"\noutput: github_document\n---\n\n<!-- badges: start -->\n[![Frontmatter check](../../actions/workflows/check-yaml.yaml/badge.svg)](../../actions/workflows/check-yaml.yaml)\n[![Render rmarkdown](../../actions/workflows/render-rmarkdown.yaml/badge.svg)](../../actions/workflows/render-rmarkdown.yaml)\n<!-- badges: end -->\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n\n\n\n\n## Prompt:\n\nThe `plyr` package has by now been replaced by other, even faster\npackages, but the idea of *Split, apply, combine* is as relevant as\never.\n\nRead the paper [The Split-Apply-Combine Strategy for Data\nAnalysis](https://www.jstatsoft.org/article/view/v040i01) by Hadley\nWickham.\n\nWrite a blog post addressing the following questions:\n\n1.  The R code for the split-apply-combine paper is posted with the\n    paper. Pick one of the examples demonstrating `plyr` functionality\n    (such as `dlply` or `ddply`, ...) and rewrite the example using\n    functionality from the package `dplyr`. Make sure that your example\n    works and the results are identical.\n    \nFor the baseball case study, the goal is to calculate the \"career year\", that is the number of years since the player started playing, for all players with `ddply`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(\"plyr\")\n#baseball <- ddply(baseball, .(id), transform, \n#cyear = year - min(year) + 1)\n```\n:::\n\n\nThe same thing can be done with 'dplyr' by grouping the data based on the same IDs, mutating cyear column with the formula, arranging the rows according to the IDs, then ungrouping the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(\"dplyr\")\n#baseball <- baseball %>% group_by(id) %>% mutate(cyear = year - min(year) + 1) %>% arrange(baseball$id) %>% ungroup(id)\n```\n:::\n\n\nA linear model was fitted to each player in the next example with `dlply`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(\"plyr\")\n#library(\"dplyr\")\n#library(\"tidyverse\")\n#library(\"broom\")\n#library(\"tidyr\")\n#library(\"ggplot2\")\n#library(\"purrr\")\n#library(\"reshape2\")\n#source(\"v40i01.R\")\n#model <- function(df) { lm (rbi / ab ~ cyear, data=df, na.action=na.omit) }\n#bmodels <- dlply(baseball, .(id), model)\n```\n:::\n\n\nWe can do the same thing with `dplyr`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(\"dplyr\")\n#library(\"reshape2\")\n#library(\"ggforce\")\n#source(\"v40i01.R\")\n#bmodels <- baseball %>% group_by(id) %>% do(bmodels = lm(rbi / ab ~ cyear, data = baseball))\n```\n:::\n\n2.  Which (base R) functions do you know that support the\n    split-apply-combine strategy? In your opinion, are these sufficient?\n    State why or why not?\n    \nPrior to this, I just used apply() and lapply(). \nSince we work with different inputs and want different outputs, we need more functions to get different outputs. There may also be times when we need to do some functions on a part of data, not all, as well as different functions on different parts of data. Hence, we should split up the data into manageable pieces, analyze each piece individually and incorporate them back together. Therefore, these two functions are not enough.\n\n3. The ChatGPT response to the prompt \"Describe the split-apply-combine paradigm\" is given below. Generally, the chatbot's answers are decent. ChatGPT does have problems getting details right. Which details would you change in the response? \n\n    \n>    The \"split-apply-combine\" paradigm is a data analysis strategy used in statistics and data science to analyze **grouped data**. It consists of three steps:\n*Grouped data term is not really my cup of tea, we use split-apply-combine to break up large problems into manageable pieces, our big problem could be grouped or not.We can split whatever data object we have into meaningful chunks*.\n\n>    Split: The data is first split into *groups* based on one or more variables of interest.\n*I would personally go for subsets instead of groups. In addition, it should be mentioned that in split phase we can coerces a data-frame to a list of vectors, divide a vector or data-frame into the groups defined by a factor, split a vector or the column of a data-frame into the groups defined by a factor.*\n\n>    Apply: A specific operation or function is applied to each group of data, usually for the purpose of aggregating, summarizing, or transforming the data within each group.\n*It's important to mention the inputs and outputs, because we can apply a function to the margins of an array, each cell of a ragged array, over a list or vector, and so forth. We can actually apply the function of interest to each element in our divisions.*\n\n> Combine: The results of the operation applied to each group are then combined and returned as a *single* output.\n*We can have different kinds of outputs, we can combine the results into a new object of the desired structure*\n\n> The split-apply-combine paradigm is particularly useful in cases where the data cannot be analyzed as a whole and instead must be analyzed in smaller, more manageable chunks. This allows for more efficient data processing and improved scalability. The paradigm is commonly implemented using tools such as the \"groupby\" function in the R and Python programming languages, and the \"dplyr\" library in R.\n*It should be mention that `Group_by()` function belongs to the `dplyr` package, and `dplyr` is the next iteration of `plyr`, focusing on only data frames. *\n\n**\nYou can write your answers directly the `README.Rmd` file. \nMake sure that the file knits (you will need to activate any packages your use in your code chunks with a call to `library(xxx)`, where xxx is the name of the package, such as `plyr` ).\nCommit your changes and push to your repo;  add any files in the `README_files` directory to your repository. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}